@model StudentApplicationSystem.Models.User

@{
    ViewBag.Title = "Login";
}

<script type="text/javascript">
    function showPassword() {
        var passField = document.getElementById("password");
        if (passField.type === "password") {
            passField.type = "text;"
        } else {
            passField.type = "password";
        }
    }


    function registerValidation() {

        var fname = document.registration.fname;
        var lname = document.registration.lname;
        var email = document.registration.email;
        var pass = document.registration.password;

        if (passid_validation(pass, 8, 16)) {

            if (allLetter(fname, lname)) {

                if (ValidateEmail(email)) {
                    return true;
                }
            }
        }
        console.log("Returned false");
        return false;

    }

    function passid_validation(passid, mx, my) {
        var passid_len = passid.value.length;
        var format = /(?=.*[A-Za-z])(?=.*\d)(?=.*[@("@")$!%*#?&])[A-Za-z\d@("@")$!%*#?&]{8,16}$/;
        if (passid_len == 0 || passid_len >= my || passid_len < mx) {
            alert("Password should not be empty / length must be between " + mx + " to " + my);
            passid.focus();
            console.log("Returned false");
            return false;
        }
        if (passid.value.match(format)) {
    	    return true;
        }else{
    	    alert('Password must contain at least one digit, one uppercase, one lowercase and one symbol.');
    	    passid.focus();
    	    console.log("Returned false");
    	    return false;
        }

    }

    function allLetter(fname, lname) {
            var letters = /^[A-Za-z]+$/;
            if (fname.value.match(letters) && lname.value.match(letters)) {

                return true;
            } else {
                alert('Name fields must have alphabet characters only');
                fname.focus();
                lname.focus();
                console.log("Returned false");
                return false;
            }
    }

    function ValidateEmail(uemail) {
            var mailformat = /^\w+([\.-]?\w+)*@("@")\w+([\.-]?\w+)*(\.\w{2,3})+$/;
            if (uemail.value.match(mailformat)) {
                return true;
            } else {
                alert("You have entered an invalid email address!");
                uemail.focus();
                console.log("Returned false");
                return false;
            }
    }
</script>


<h2>Login</h2>

<div class="row">
    <div>
        <hr class="soft" />

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.email, new { htmlAttributes = new { @class = "form-control", @placeholder = "Email" } })
                    @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.password, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.PasswordFor(model => model.password, new { @class = "form-control", @placeholder = "Password" })
                    @Html.ValidationMessageFor(model => model.password, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Show Password", new { @class="control-label col-md-2" })
                <div class="col-md-10">
                    <label class="switch">
                        <input type="checkbox" id="passwordShow" onclick="showPassword()">
                        <span class="slider round"></span>
                    </label>
                </div>
            </div>


            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Login" class="btn btn-primary" id="login-button" />
                </div>
            </div>
        </div>
        }

    </div>

    <div>
        <form action="/User/Create">
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Sign Up" class="btn btn-primary" id="register-button-login" />
                </div>
            </div>
        </form>
    </div>

</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
